#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>
// IoT platform Credentials
String apiKey = "NVP8WNAML4DDIXTM";
const char* logServer = "slack.com";

// Internet router credentials
const char* ssid = "DMENET";
const char* password = "LibDmE2016";

String MESSAGE = "Someone pushed button number ";

ESP8266WebServer server(80); //always included 

void setup() {
Serial.begin(115200); //changed 
WiFi.mode(WIFI_AP_STA);
Serial.println("Starting setup");
setupAccessPoint();
}
// Handling the / root web page from my server
void handle_index() {
  server.send(200, "text/plain", "Get the f**k out from my server!");
}

// Handling the /feed page from my server
void handle_feed() {
String t = server.arg("button");
//String h = server.arg("hum");

server.send(200, "text/plain", "This is response to client");
setupStMode(t);
}

void setupAccessPoint(){
Serial.println("** SETUP ACCESS POINT **");
Serial.println("- disconnect from any other modes");
WiFi.disconnect();
Serial.println("- start ap with SID: "+ String(ssid));
WiFi.softAP(ssid, password);
IPAddress myIP = WiFi.softAPIP();
Serial.println("- AP IP address is :");
Serial.print(myIP);
setupServer();
}

void setupServer(){
Serial.println("** SETUP SERVER **");
Serial.println("- starting server :");
server.on("/", handle_index);
server.on("/feed", handle_feed);
server.begin();
}

void setupStMode(String t){
Serial.println("** SETUP STATION MODE **");
Serial.println("- disconnect from any other modes");
WiFi.disconnect();
Serial.println();
Serial.println("- connecting to Home Router SSID");
WiFi.begin(ssid, password);
while (WiFi.status() != WL_CONNECTED) {
delay(500);
Serial.print(".");
}
Serial.println();
Serial.println("- succesfully connected");
Serial.println("- starting client");

WiFiClient client;

Serial.println("- connecting to Database server: " + String(logServer));
  if (client.connect(logServer, 80)) {
Serial.println("- succesfully connected");
String postStr;
postStr = "{\"text\": \"";
postStr += MESSAGE;
postStr += String(t);
postStr += "\"}";
postStr += 
postStr += "}"; 
//postStr += "&field2=";
//postStr += String(v);
postStr += "\r\n\r\n";
Serial.println("- sending data...");
    client.print("POST https://hooks.slack.com/services/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");
    client.print("Content-type: application/json");
    client.print("Connection: close\n");
    client.print("Content-Length: ");
    client.print(postStr.length());
    client.print("\n\n");
    client.print(postStr);
}
client.stop();
Serial.println("- stopping the client");
/** If your ESP does not respond you can just
  *** reset after each request sending 
  Serial.println("- trying reset");
  ESP.reset();
  **/
ESP.reset();
}

void loop() {
  server.handleClient();
}
